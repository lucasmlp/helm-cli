// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/adapters/storage/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/lucasmlp/helm-cli/internal/pkg/services/models"
)

// MockAdapter is a mock of Adapter interface.
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter.
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance.
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// AddChart mocks base method.
func (m *MockAdapter) AddChart(chart *models.HelmChart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChart", chart)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddChart indicates an expected call of AddChart.
func (mr *MockAdapterMockRecorder) AddChart(chart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChart", reflect.TypeOf((*MockAdapter)(nil).AddChart), chart)
}

// AddRepository mocks base method.
func (m *MockAdapter) AddRepository(repository *models.HelmRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRepository", repository)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRepository indicates an expected call of AddRepository.
func (mr *MockAdapterMockRecorder) AddRepository(repository interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRepository", reflect.TypeOf((*MockAdapter)(nil).AddRepository), repository)
}

// GetChart mocks base method.
func (m *MockAdapter) GetChart(name string) (*models.HelmChart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChart", name)
	ret0, _ := ret[0].(*models.HelmChart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChart indicates an expected call of GetChart.
func (mr *MockAdapterMockRecorder) GetChart(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChart", reflect.TypeOf((*MockAdapter)(nil).GetChart), name)
}

// GetChartList mocks base method.
func (m *MockAdapter) GetChartList() ([]*models.HelmChart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChartList")
	ret0, _ := ret[0].([]*models.HelmChart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChartList indicates an expected call of GetChartList.
func (mr *MockAdapterMockRecorder) GetChartList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChartList", reflect.TypeOf((*MockAdapter)(nil).GetChartList))
}

// GetRepository mocks base method.
func (m *MockAdapter) GetRepository(name string) (*models.HelmRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", name)
	ret0, _ := ret[0].(*models.HelmRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockAdapterMockRecorder) GetRepository(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockAdapter)(nil).GetRepository), name)
}

// GetRepositoryList mocks base method.
func (m *MockAdapter) GetRepositoryList() ([]*models.HelmRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryList")
	ret0, _ := ret[0].([]*models.HelmRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryList indicates an expected call of GetRepositoryList.
func (mr *MockAdapterMockRecorder) GetRepositoryList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryList", reflect.TypeOf((*MockAdapter)(nil).GetRepositoryList))
}
