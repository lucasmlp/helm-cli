// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/adapters/helm/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/lucasmlp/helm-cli/internal/pkg/services/models"
)

// MockAdapter is a mock of Adapter interface.
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter.
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance.
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// GenerateIndexFile mocks base method.
func (m *MockAdapter) GenerateIndexFile() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateIndexFile")
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateIndexFile indicates an expected call of GenerateIndexFile.
func (mr *MockAdapterMockRecorder) GenerateIndexFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateIndexFile", reflect.TypeOf((*MockAdapter)(nil).GenerateIndexFile))
}

// InstallChart mocks base method.
func (m *MockAdapter) InstallChart(releaseName, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallChart", releaseName, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallChart indicates an expected call of InstallChart.
func (mr *MockAdapterMockRecorder) InstallChart(releaseName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallChart", reflect.TypeOf((*MockAdapter)(nil).InstallChart), releaseName, name)
}

// LocateChartInLocalRepository mocks base method.
func (m *MockAdapter) LocateChartInLocalRepository(name, path string) (*bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocateChartInLocalRepository", name, path)
	ret0, _ := ret[0].(*bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocateChartInLocalRepository indicates an expected call of LocateChartInLocalRepository.
func (mr *MockAdapterMockRecorder) LocateChartInLocalRepository(name, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocateChartInLocalRepository", reflect.TypeOf((*MockAdapter)(nil).LocateChartInLocalRepository), name, path)
}

// LocateChartInWebRepository mocks base method.
func (m *MockAdapter) LocateChartInWebRepository(name, url string) (*bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocateChartInWebRepository", name, url)
	ret0, _ := ret[0].(*bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocateChartInWebRepository indicates an expected call of LocateChartInWebRepository.
func (mr *MockAdapterMockRecorder) LocateChartInWebRepository(name, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocateChartInWebRepository", reflect.TypeOf((*MockAdapter)(nil).LocateChartInWebRepository), name, url)
}

// RetrieveLocalChart mocks base method.
func (m *MockAdapter) RetrieveLocalChart(name, path string) (*models.HelmChart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveLocalChart", name, path)
	ret0, _ := ret[0].(*models.HelmChart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveLocalChart indicates an expected call of RetrieveLocalChart.
func (mr *MockAdapterMockRecorder) RetrieveLocalChart(name, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveLocalChart", reflect.TypeOf((*MockAdapter)(nil).RetrieveLocalChart), name, path)
}

// RetrieveRemoteChart mocks base method.
func (m *MockAdapter) RetrieveRemoteChart(name, url string) (*models.HelmChart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveRemoteChart", name, url)
	ret0, _ := ret[0].(*models.HelmChart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveRemoteChart indicates an expected call of RetrieveRemoteChart.
func (mr *MockAdapterMockRecorder) RetrieveRemoteChart(name, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveRemoteChart", reflect.TypeOf((*MockAdapter)(nil).RetrieveRemoteChart), name, url)
}
